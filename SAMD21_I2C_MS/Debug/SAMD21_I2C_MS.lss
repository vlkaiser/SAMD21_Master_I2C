
SAMD21_I2C_MS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a20  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000008  20000000  00000a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000048  20000008  00000a28  00020008  2**2
                  ALLOC
  3 .stack        00002000  20000050  00000a70  00020008  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
  6 .debug_info   00011f91  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c04  00000000  00000000  0003201a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000248  00000000  00000000  00033c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000001e8  00000000  00000000  00033e66  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00017b4c  00000000  00000000  0003404e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00005a5f  00000000  00000000  0004bb9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0008b5f8  00000000  00000000  000515f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000520  00000000  00000000  000dcbf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001ca9  00000000  00000000  000dd114  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	50 20 00 20 31 06 00 00 2d 06 00 00 2d 06 00 00     P . 1...-...-...
	...
  2c:	2d 06 00 00 00 00 00 00 00 00 00 00 2d 06 00 00     -...........-...
  3c:	2d 06 00 00 2d 06 00 00 2d 06 00 00 2d 06 00 00     -...-...-...-...
  4c:	2d 06 00 00 2d 06 00 00 2d 06 00 00 2d 06 00 00     -...-...-...-...
  5c:	2d 06 00 00 2d 06 00 00 2d 06 00 00 2d 06 00 00     -...-...-...-...
  6c:	41 08 00 00 2d 06 00 00 2d 06 00 00 2d 06 00 00     A...-...-...-...
  7c:	2d 06 00 00 2d 06 00 00 2d 06 00 00 2d 06 00 00     -...-...-...-...
  8c:	2d 06 00 00 2d 06 00 00 2d 06 00 00 2d 06 00 00     -...-...-...-...
  9c:	2d 06 00 00 2d 06 00 00 2d 06 00 00 2d 06 00 00     -...-...-...-...
  ac:	2d 06 00 00 00 00 00 00                             -.......

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000008 	.word	0x20000008
  d4:	00000000 	.word	0x00000000
  d8:	00000a20 	.word	0x00000a20

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	2000000c 	.word	0x2000000c
 108:	00000a20 	.word	0x00000a20
 10c:	00000a20 	.word	0x00000a20
 110:	00000000 	.word	0x00000000

00000114 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
 114:	4b0c      	ldr	r3, [pc, #48]	; (148 <cpu_irq_enter_critical+0x34>)
 116:	681b      	ldr	r3, [r3, #0]
 118:	2b00      	cmp	r3, #0
 11a:	d106      	bne.n	12a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 11c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
 120:	2b00      	cmp	r3, #0
 122:	d007      	beq.n	134 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
 124:	2200      	movs	r2, #0
 126:	4b09      	ldr	r3, [pc, #36]	; (14c <cpu_irq_enter_critical+0x38>)
 128:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
 12a:	4a07      	ldr	r2, [pc, #28]	; (148 <cpu_irq_enter_critical+0x34>)
 12c:	6813      	ldr	r3, [r2, #0]
 12e:	3301      	adds	r3, #1
 130:	6013      	str	r3, [r2, #0]
}
 132:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 134:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
 136:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
 13a:	2200      	movs	r2, #0
 13c:	4b04      	ldr	r3, [pc, #16]	; (150 <cpu_irq_enter_critical+0x3c>)
 13e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
 140:	3201      	adds	r2, #1
 142:	4b02      	ldr	r3, [pc, #8]	; (14c <cpu_irq_enter_critical+0x38>)
 144:	701a      	strb	r2, [r3, #0]
 146:	e7f0      	b.n	12a <cpu_irq_enter_critical+0x16>
 148:	20000024 	.word	0x20000024
 14c:	20000028 	.word	0x20000028
 150:	20000000 	.word	0x20000000

00000154 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
 154:	4b08      	ldr	r3, [pc, #32]	; (178 <cpu_irq_leave_critical+0x24>)
 156:	681a      	ldr	r2, [r3, #0]
 158:	3a01      	subs	r2, #1
 15a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
 15c:	681b      	ldr	r3, [r3, #0]
 15e:	2b00      	cmp	r3, #0
 160:	d109      	bne.n	176 <cpu_irq_leave_critical+0x22>
 162:	4b06      	ldr	r3, [pc, #24]	; (17c <cpu_irq_leave_critical+0x28>)
 164:	781b      	ldrb	r3, [r3, #0]
 166:	2b00      	cmp	r3, #0
 168:	d005      	beq.n	176 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
 16a:	2201      	movs	r2, #1
 16c:	4b04      	ldr	r3, [pc, #16]	; (180 <cpu_irq_leave_critical+0x2c>)
 16e:	701a      	strb	r2, [r3, #0]
 170:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 174:	b662      	cpsie	i
	}
}
 176:	4770      	bx	lr
 178:	20000024 	.word	0x20000024
 17c:	20000028 	.word	0x20000028
 180:	20000000 	.word	0x20000000

00000184 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
 184:	b5f0      	push	{r4, r5, r6, r7, lr}
 186:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
 188:	ac01      	add	r4, sp, #4
 18a:	2501      	movs	r5, #1
 18c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
 18e:	2700      	movs	r7, #0
 190:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
 192:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
 194:	0021      	movs	r1, r4
 196:	203e      	movs	r0, #62	; 0x3e
 198:	4e06      	ldr	r6, [pc, #24]	; (1b4 <system_board_init+0x30>)
 19a:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
 19c:	2280      	movs	r2, #128	; 0x80
 19e:	05d2      	lsls	r2, r2, #23
 1a0:	4b05      	ldr	r3, [pc, #20]	; (1b8 <system_board_init+0x34>)
 1a2:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
 1a4:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
 1a6:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
 1a8:	0021      	movs	r1, r4
 1aa:	200f      	movs	r0, #15
 1ac:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
 1ae:	b003      	add	sp, #12
 1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1b2:	46c0      	nop			; (mov r8, r8)
 1b4:	000001bd 	.word	0x000001bd
 1b8:	41004480 	.word	0x41004480

000001bc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
 1bc:	b500      	push	{lr}
 1be:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
 1c0:	ab01      	add	r3, sp, #4
 1c2:	2280      	movs	r2, #128	; 0x80
 1c4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
 1c6:	780a      	ldrb	r2, [r1, #0]
 1c8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
 1ca:	784a      	ldrb	r2, [r1, #1]
 1cc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
 1ce:	788a      	ldrb	r2, [r1, #2]
 1d0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
 1d2:	0019      	movs	r1, r3
 1d4:	4b01      	ldr	r3, [pc, #4]	; (1dc <port_pin_set_config+0x20>)
 1d6:	4798      	blx	r3
}
 1d8:	b003      	add	sp, #12
 1da:	bd00      	pop	{pc}
 1dc:	000005cd 	.word	0x000005cd

000001e0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
 1e0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
 1e2:	490c      	ldr	r1, [pc, #48]	; (214 <system_clock_source_osc8m_set_config+0x34>)
 1e4:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
 1e6:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
 1e8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
 1ea:	7840      	ldrb	r0, [r0, #1]
 1ec:	2201      	movs	r2, #1
 1ee:	4010      	ands	r0, r2
 1f0:	0180      	lsls	r0, r0, #6
 1f2:	2640      	movs	r6, #64	; 0x40
 1f4:	43b3      	bics	r3, r6
 1f6:	4303      	orrs	r3, r0
 1f8:	402a      	ands	r2, r5
 1fa:	01d2      	lsls	r2, r2, #7
 1fc:	2080      	movs	r0, #128	; 0x80
 1fe:	4383      	bics	r3, r0
 200:	4313      	orrs	r3, r2
 202:	2203      	movs	r2, #3
 204:	4022      	ands	r2, r4
 206:	0212      	lsls	r2, r2, #8
 208:	4803      	ldr	r0, [pc, #12]	; (218 <system_clock_source_osc8m_set_config+0x38>)
 20a:	4003      	ands	r3, r0
 20c:	4313      	orrs	r3, r2
 20e:	620b      	str	r3, [r1, #32]
}
 210:	bd70      	pop	{r4, r5, r6, pc}
 212:	46c0      	nop			; (mov r8, r8)
 214:	40000800 	.word	0x40000800
 218:	fffffcff 	.word	0xfffffcff

0000021c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
 21c:	2808      	cmp	r0, #8
 21e:	d803      	bhi.n	228 <system_clock_source_enable+0xc>
 220:	0080      	lsls	r0, r0, #2
 222:	4b25      	ldr	r3, [pc, #148]	; (2b8 <system_clock_source_enable+0x9c>)
 224:	581b      	ldr	r3, [r3, r0]
 226:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 228:	2017      	movs	r0, #23
 22a:	e044      	b.n	2b6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
 22c:	4a23      	ldr	r2, [pc, #140]	; (2bc <system_clock_source_enable+0xa0>)
 22e:	6a13      	ldr	r3, [r2, #32]
 230:	2102      	movs	r1, #2
 232:	430b      	orrs	r3, r1
 234:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
 236:	2000      	movs	r0, #0
 238:	e03d      	b.n	2b6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
 23a:	4a20      	ldr	r2, [pc, #128]	; (2bc <system_clock_source_enable+0xa0>)
 23c:	6993      	ldr	r3, [r2, #24]
 23e:	2102      	movs	r1, #2
 240:	430b      	orrs	r3, r1
 242:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
 244:	2000      	movs	r0, #0
		break;
 246:	e036      	b.n	2b6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
 248:	4a1c      	ldr	r2, [pc, #112]	; (2bc <system_clock_source_enable+0xa0>)
 24a:	8a13      	ldrh	r3, [r2, #16]
 24c:	2102      	movs	r1, #2
 24e:	430b      	orrs	r3, r1
 250:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
 252:	2000      	movs	r0, #0
		break;
 254:	e02f      	b.n	2b6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
 256:	4a19      	ldr	r2, [pc, #100]	; (2bc <system_clock_source_enable+0xa0>)
 258:	8a93      	ldrh	r3, [r2, #20]
 25a:	2102      	movs	r1, #2
 25c:	430b      	orrs	r3, r1
 25e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
 260:	2000      	movs	r0, #0
		break;
 262:	e028      	b.n	2b6 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
 264:	4916      	ldr	r1, [pc, #88]	; (2c0 <system_clock_source_enable+0xa4>)
 266:	680b      	ldr	r3, [r1, #0]
 268:	2202      	movs	r2, #2
 26a:	4313      	orrs	r3, r2
 26c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
 26e:	4b13      	ldr	r3, [pc, #76]	; (2bc <system_clock_source_enable+0xa0>)
 270:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 272:	0019      	movs	r1, r3
 274:	320e      	adds	r2, #14
 276:	68cb      	ldr	r3, [r1, #12]
 278:	421a      	tst	r2, r3
 27a:	d0fc      	beq.n	276 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
 27c:	4a10      	ldr	r2, [pc, #64]	; (2c0 <system_clock_source_enable+0xa4>)
 27e:	6891      	ldr	r1, [r2, #8]
 280:	4b0e      	ldr	r3, [pc, #56]	; (2bc <system_clock_source_enable+0xa0>)
 282:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
 284:	6852      	ldr	r2, [r2, #4]
 286:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
 288:	2200      	movs	r2, #0
 28a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 28c:	0019      	movs	r1, r3
 28e:	3210      	adds	r2, #16
 290:	68cb      	ldr	r3, [r1, #12]
 292:	421a      	tst	r2, r3
 294:	d0fc      	beq.n	290 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
 296:	4b0a      	ldr	r3, [pc, #40]	; (2c0 <system_clock_source_enable+0xa4>)
 298:	681b      	ldr	r3, [r3, #0]
 29a:	b29b      	uxth	r3, r3
 29c:	4a07      	ldr	r2, [pc, #28]	; (2bc <system_clock_source_enable+0xa0>)
 29e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
 2a0:	2000      	movs	r0, #0
 2a2:	e008      	b.n	2b6 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
 2a4:	4905      	ldr	r1, [pc, #20]	; (2bc <system_clock_source_enable+0xa0>)
 2a6:	2244      	movs	r2, #68	; 0x44
 2a8:	5c8b      	ldrb	r3, [r1, r2]
 2aa:	2002      	movs	r0, #2
 2ac:	4303      	orrs	r3, r0
 2ae:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
 2b0:	2000      	movs	r0, #0
		break;
 2b2:	e000      	b.n	2b6 <system_clock_source_enable+0x9a>
		return STATUS_OK;
 2b4:	2000      	movs	r0, #0
}
 2b6:	4770      	bx	lr
 2b8:	000009dc 	.word	0x000009dc
 2bc:	40000800 	.word	0x40000800
 2c0:	2000002c 	.word	0x2000002c

000002c4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
 2c4:	b530      	push	{r4, r5, lr}
 2c6:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
 2c8:	22c2      	movs	r2, #194	; 0xc2
 2ca:	00d2      	lsls	r2, r2, #3
 2cc:	4b1a      	ldr	r3, [pc, #104]	; (338 <system_clock_init+0x74>)
 2ce:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
 2d0:	4a1a      	ldr	r2, [pc, #104]	; (33c <system_clock_init+0x78>)
 2d2:	6853      	ldr	r3, [r2, #4]
 2d4:	211e      	movs	r1, #30
 2d6:	438b      	bics	r3, r1
 2d8:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
 2da:	2301      	movs	r3, #1
 2dc:	466a      	mov	r2, sp
 2de:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 2e0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
 2e2:	4d17      	ldr	r5, [pc, #92]	; (340 <system_clock_init+0x7c>)
 2e4:	b2e0      	uxtb	r0, r4
 2e6:	4669      	mov	r1, sp
 2e8:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 2ea:	3401      	adds	r4, #1
 2ec:	2c25      	cmp	r4, #37	; 0x25
 2ee:	d1f9      	bne.n	2e4 <system_clock_init+0x20>
	config->run_in_standby  = false;
 2f0:	a803      	add	r0, sp, #12
 2f2:	2400      	movs	r4, #0
 2f4:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
 2f6:	2501      	movs	r5, #1
 2f8:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
 2fa:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
 2fc:	4b11      	ldr	r3, [pc, #68]	; (344 <system_clock_init+0x80>)
 2fe:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
 300:	2006      	movs	r0, #6
 302:	4b11      	ldr	r3, [pc, #68]	; (348 <system_clock_init+0x84>)
 304:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
 306:	4b11      	ldr	r3, [pc, #68]	; (34c <system_clock_init+0x88>)
 308:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
 30a:	4b11      	ldr	r3, [pc, #68]	; (350 <system_clock_init+0x8c>)
 30c:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
 30e:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
 310:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
 312:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
 314:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
 316:	466b      	mov	r3, sp
 318:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
 31a:	2306      	movs	r3, #6
 31c:	466a      	mov	r2, sp
 31e:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
 320:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
 322:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
 324:	4669      	mov	r1, sp
 326:	2000      	movs	r0, #0
 328:	4b0a      	ldr	r3, [pc, #40]	; (354 <system_clock_init+0x90>)
 32a:	4798      	blx	r3
 32c:	2000      	movs	r0, #0
 32e:	4b0a      	ldr	r3, [pc, #40]	; (358 <system_clock_init+0x94>)
 330:	4798      	blx	r3
#endif
}
 332:	b005      	add	sp, #20
 334:	bd30      	pop	{r4, r5, pc}
 336:	46c0      	nop			; (mov r8, r8)
 338:	40000800 	.word	0x40000800
 33c:	41004000 	.word	0x41004000
 340:	00000509 	.word	0x00000509
 344:	000001e1 	.word	0x000001e1
 348:	0000021d 	.word	0x0000021d
 34c:	0000035d 	.word	0x0000035d
 350:	40000400 	.word	0x40000400
 354:	00000381 	.word	0x00000381
 358:	00000439 	.word	0x00000439

0000035c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
 35c:	4a06      	ldr	r2, [pc, #24]	; (378 <system_gclk_init+0x1c>)
 35e:	6993      	ldr	r3, [r2, #24]
 360:	2108      	movs	r1, #8
 362:	430b      	orrs	r3, r1
 364:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
 366:	2201      	movs	r2, #1
 368:	4b04      	ldr	r3, [pc, #16]	; (37c <system_gclk_init+0x20>)
 36a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
 36c:	0019      	movs	r1, r3
 36e:	780b      	ldrb	r3, [r1, #0]
 370:	4213      	tst	r3, r2
 372:	d1fc      	bne.n	36e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
 374:	4770      	bx	lr
 376:	46c0      	nop			; (mov r8, r8)
 378:	40000400 	.word	0x40000400
 37c:	40000c00 	.word	0x40000c00

00000380 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
 380:	b570      	push	{r4, r5, r6, lr}
 382:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
 384:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
 386:	780d      	ldrb	r5, [r1, #0]
 388:	022d      	lsls	r5, r5, #8
 38a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
 38c:	784b      	ldrb	r3, [r1, #1]
 38e:	2b00      	cmp	r3, #0
 390:	d002      	beq.n	398 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
 392:	2380      	movs	r3, #128	; 0x80
 394:	02db      	lsls	r3, r3, #11
 396:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
 398:	7a4b      	ldrb	r3, [r1, #9]
 39a:	2b00      	cmp	r3, #0
 39c:	d002      	beq.n	3a4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
 39e:	2380      	movs	r3, #128	; 0x80
 3a0:	031b      	lsls	r3, r3, #12
 3a2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
 3a4:	6848      	ldr	r0, [r1, #4]
 3a6:	2801      	cmp	r0, #1
 3a8:	d910      	bls.n	3cc <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
 3aa:	1e43      	subs	r3, r0, #1
 3ac:	4218      	tst	r0, r3
 3ae:	d134      	bne.n	41a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 3b0:	2802      	cmp	r0, #2
 3b2:	d930      	bls.n	416 <system_gclk_gen_set_config+0x96>
 3b4:	2302      	movs	r3, #2
 3b6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
 3b8:	3201      	adds	r2, #1
						mask <<= 1) {
 3ba:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
 3bc:	4298      	cmp	r0, r3
 3be:	d8fb      	bhi.n	3b8 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
 3c0:	0212      	lsls	r2, r2, #8
 3c2:	4332      	orrs	r2, r6
 3c4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
 3c6:	2380      	movs	r3, #128	; 0x80
 3c8:	035b      	lsls	r3, r3, #13
 3ca:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
 3cc:	7a0b      	ldrb	r3, [r1, #8]
 3ce:	2b00      	cmp	r3, #0
 3d0:	d002      	beq.n	3d8 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
 3d2:	2380      	movs	r3, #128	; 0x80
 3d4:	039b      	lsls	r3, r3, #14
 3d6:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 3d8:	4a13      	ldr	r2, [pc, #76]	; (428 <system_gclk_gen_set_config+0xa8>)
 3da:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
 3dc:	b25b      	sxtb	r3, r3
 3de:	2b00      	cmp	r3, #0
 3e0:	dbfb      	blt.n	3da <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 3e2:	4b12      	ldr	r3, [pc, #72]	; (42c <system_gclk_gen_set_config+0xac>)
 3e4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 3e6:	4b12      	ldr	r3, [pc, #72]	; (430 <system_gclk_gen_set_config+0xb0>)
 3e8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 3ea:	4a0f      	ldr	r2, [pc, #60]	; (428 <system_gclk_gen_set_config+0xa8>)
 3ec:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
 3ee:	b25b      	sxtb	r3, r3
 3f0:	2b00      	cmp	r3, #0
 3f2:	dbfb      	blt.n	3ec <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
 3f4:	4b0c      	ldr	r3, [pc, #48]	; (428 <system_gclk_gen_set_config+0xa8>)
 3f6:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 3f8:	001a      	movs	r2, r3
 3fa:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
 3fc:	b25b      	sxtb	r3, r3
 3fe:	2b00      	cmp	r3, #0
 400:	dbfb      	blt.n	3fa <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
 402:	4a09      	ldr	r2, [pc, #36]	; (428 <system_gclk_gen_set_config+0xa8>)
 404:	6853      	ldr	r3, [r2, #4]
 406:	2180      	movs	r1, #128	; 0x80
 408:	0249      	lsls	r1, r1, #9
 40a:	400b      	ands	r3, r1
 40c:	431d      	orrs	r5, r3
 40e:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 410:	4b08      	ldr	r3, [pc, #32]	; (434 <system_gclk_gen_set_config+0xb4>)
 412:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 414:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
 416:	2200      	movs	r2, #0
 418:	e7d2      	b.n	3c0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
 41a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
 41c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
 41e:	2380      	movs	r3, #128	; 0x80
 420:	029b      	lsls	r3, r3, #10
 422:	431d      	orrs	r5, r3
 424:	e7d2      	b.n	3cc <system_gclk_gen_set_config+0x4c>
 426:	46c0      	nop			; (mov r8, r8)
 428:	40000c00 	.word	0x40000c00
 42c:	00000115 	.word	0x00000115
 430:	40000c08 	.word	0x40000c08
 434:	00000155 	.word	0x00000155

00000438 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
 438:	b510      	push	{r4, lr}
 43a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 43c:	4a0b      	ldr	r2, [pc, #44]	; (46c <system_gclk_gen_enable+0x34>)
 43e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 440:	b25b      	sxtb	r3, r3
 442:	2b00      	cmp	r3, #0
 444:	dbfb      	blt.n	43e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
 446:	4b0a      	ldr	r3, [pc, #40]	; (470 <system_gclk_gen_enable+0x38>)
 448:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 44a:	4b0a      	ldr	r3, [pc, #40]	; (474 <system_gclk_gen_enable+0x3c>)
 44c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 44e:	4a07      	ldr	r2, [pc, #28]	; (46c <system_gclk_gen_enable+0x34>)
 450:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 452:	b25b      	sxtb	r3, r3
 454:	2b00      	cmp	r3, #0
 456:	dbfb      	blt.n	450 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
 458:	4a04      	ldr	r2, [pc, #16]	; (46c <system_gclk_gen_enable+0x34>)
 45a:	6851      	ldr	r1, [r2, #4]
 45c:	2380      	movs	r3, #128	; 0x80
 45e:	025b      	lsls	r3, r3, #9
 460:	430b      	orrs	r3, r1
 462:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
 464:	4b04      	ldr	r3, [pc, #16]	; (478 <system_gclk_gen_enable+0x40>)
 466:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 468:	bd10      	pop	{r4, pc}
 46a:	46c0      	nop			; (mov r8, r8)
 46c:	40000c00 	.word	0x40000c00
 470:	00000115 	.word	0x00000115
 474:	40000c04 	.word	0x40000c04
 478:	00000155 	.word	0x00000155

0000047c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
 47c:	b510      	push	{r4, lr}
 47e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 480:	4b06      	ldr	r3, [pc, #24]	; (49c <system_gclk_chan_enable+0x20>)
 482:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 484:	4b06      	ldr	r3, [pc, #24]	; (4a0 <system_gclk_chan_enable+0x24>)
 486:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
 488:	4a06      	ldr	r2, [pc, #24]	; (4a4 <system_gclk_chan_enable+0x28>)
 48a:	8853      	ldrh	r3, [r2, #2]
 48c:	2180      	movs	r1, #128	; 0x80
 48e:	01c9      	lsls	r1, r1, #7
 490:	430b      	orrs	r3, r1
 492:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
 494:	4b04      	ldr	r3, [pc, #16]	; (4a8 <system_gclk_chan_enable+0x2c>)
 496:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 498:	bd10      	pop	{r4, pc}
 49a:	46c0      	nop			; (mov r8, r8)
 49c:	00000115 	.word	0x00000115
 4a0:	40000c02 	.word	0x40000c02
 4a4:	40000c00 	.word	0x40000c00
 4a8:	00000155 	.word	0x00000155

000004ac <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
 4ac:	b510      	push	{r4, lr}
 4ae:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 4b0:	4b0f      	ldr	r3, [pc, #60]	; (4f0 <system_gclk_chan_disable+0x44>)
 4b2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 4b4:	4b0f      	ldr	r3, [pc, #60]	; (4f4 <system_gclk_chan_disable+0x48>)
 4b6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
 4b8:	4a0f      	ldr	r2, [pc, #60]	; (4f8 <system_gclk_chan_disable+0x4c>)
 4ba:	8853      	ldrh	r3, [r2, #2]
 4bc:	051b      	lsls	r3, r3, #20
 4be:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
 4c0:	8853      	ldrh	r3, [r2, #2]
 4c2:	490e      	ldr	r1, [pc, #56]	; (4fc <system_gclk_chan_disable+0x50>)
 4c4:	400b      	ands	r3, r1
 4c6:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
 4c8:	8853      	ldrh	r3, [r2, #2]
 4ca:	490d      	ldr	r1, [pc, #52]	; (500 <system_gclk_chan_disable+0x54>)
 4cc:	400b      	ands	r3, r1
 4ce:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
 4d0:	0011      	movs	r1, r2
 4d2:	2280      	movs	r2, #128	; 0x80
 4d4:	01d2      	lsls	r2, r2, #7
 4d6:	884b      	ldrh	r3, [r1, #2]
 4d8:	4213      	tst	r3, r2
 4da:	d1fc      	bne.n	4d6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
 4dc:	4906      	ldr	r1, [pc, #24]	; (4f8 <system_gclk_chan_disable+0x4c>)
 4de:	884a      	ldrh	r2, [r1, #2]
 4e0:	0203      	lsls	r3, r0, #8
 4e2:	4806      	ldr	r0, [pc, #24]	; (4fc <system_gclk_chan_disable+0x50>)
 4e4:	4002      	ands	r2, r0
 4e6:	4313      	orrs	r3, r2
 4e8:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
 4ea:	4b06      	ldr	r3, [pc, #24]	; (504 <system_gclk_chan_disable+0x58>)
 4ec:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 4ee:	bd10      	pop	{r4, pc}
 4f0:	00000115 	.word	0x00000115
 4f4:	40000c02 	.word	0x40000c02
 4f8:	40000c00 	.word	0x40000c00
 4fc:	fffff0ff 	.word	0xfffff0ff
 500:	ffffbfff 	.word	0xffffbfff
 504:	00000155 	.word	0x00000155

00000508 <system_gclk_chan_set_config>:
{
 508:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
 50a:	780c      	ldrb	r4, [r1, #0]
 50c:	0224      	lsls	r4, r4, #8
 50e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
 510:	4b02      	ldr	r3, [pc, #8]	; (51c <system_gclk_chan_set_config+0x14>)
 512:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
 514:	b2a4      	uxth	r4, r4
 516:	4b02      	ldr	r3, [pc, #8]	; (520 <system_gclk_chan_set_config+0x18>)
 518:	805c      	strh	r4, [r3, #2]
}
 51a:	bd10      	pop	{r4, pc}
 51c:	000004ad 	.word	0x000004ad
 520:	40000c00 	.word	0x40000c00

00000524 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
 524:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
 526:	78d3      	ldrb	r3, [r2, #3]
 528:	2b00      	cmp	r3, #0
 52a:	d135      	bne.n	598 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
 52c:	7813      	ldrb	r3, [r2, #0]
 52e:	2b80      	cmp	r3, #128	; 0x80
 530:	d029      	beq.n	586 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
 532:	061b      	lsls	r3, r3, #24
 534:	2480      	movs	r4, #128	; 0x80
 536:	0264      	lsls	r4, r4, #9
 538:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
 53a:	7854      	ldrb	r4, [r2, #1]
 53c:	2502      	movs	r5, #2
 53e:	43ac      	bics	r4, r5
 540:	d106      	bne.n	550 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
 542:	7894      	ldrb	r4, [r2, #2]
 544:	2c00      	cmp	r4, #0
 546:	d120      	bne.n	58a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
 548:	2480      	movs	r4, #128	; 0x80
 54a:	02a4      	lsls	r4, r4, #10
 54c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
 54e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 550:	7854      	ldrb	r4, [r2, #1]
 552:	3c01      	subs	r4, #1
 554:	2c01      	cmp	r4, #1
 556:	d91c      	bls.n	592 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 558:	040d      	lsls	r5, r1, #16
 55a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 55c:	24a0      	movs	r4, #160	; 0xa0
 55e:	05e4      	lsls	r4, r4, #23
 560:	432c      	orrs	r4, r5
 562:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 564:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 566:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 568:	24d0      	movs	r4, #208	; 0xd0
 56a:	0624      	lsls	r4, r4, #24
 56c:	432c      	orrs	r4, r5
 56e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 570:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
 572:	78d4      	ldrb	r4, [r2, #3]
 574:	2c00      	cmp	r4, #0
 576:	d122      	bne.n	5be <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
 578:	035b      	lsls	r3, r3, #13
 57a:	d51c      	bpl.n	5b6 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
 57c:	7893      	ldrb	r3, [r2, #2]
 57e:	2b01      	cmp	r3, #1
 580:	d01e      	beq.n	5c0 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
 582:	6141      	str	r1, [r0, #20]
 584:	e017      	b.n	5b6 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
 586:	2300      	movs	r3, #0
 588:	e7d7      	b.n	53a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
 58a:	24c0      	movs	r4, #192	; 0xc0
 58c:	02e4      	lsls	r4, r4, #11
 58e:	4323      	orrs	r3, r4
 590:	e7dd      	b.n	54e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
 592:	4c0d      	ldr	r4, [pc, #52]	; (5c8 <_system_pinmux_config+0xa4>)
 594:	4023      	ands	r3, r4
 596:	e7df      	b.n	558 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
 598:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 59a:	040c      	lsls	r4, r1, #16
 59c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 59e:	23a0      	movs	r3, #160	; 0xa0
 5a0:	05db      	lsls	r3, r3, #23
 5a2:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 5a4:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 5a6:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 5a8:	23d0      	movs	r3, #208	; 0xd0
 5aa:	061b      	lsls	r3, r3, #24
 5ac:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 5ae:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
 5b0:	78d3      	ldrb	r3, [r2, #3]
 5b2:	2b00      	cmp	r3, #0
 5b4:	d103      	bne.n	5be <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 5b6:	7853      	ldrb	r3, [r2, #1]
 5b8:	3b01      	subs	r3, #1
 5ba:	2b01      	cmp	r3, #1
 5bc:	d902      	bls.n	5c4 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
 5be:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
 5c0:	6181      	str	r1, [r0, #24]
 5c2:	e7f8      	b.n	5b6 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
 5c4:	6081      	str	r1, [r0, #8]
}
 5c6:	e7fa      	b.n	5be <_system_pinmux_config+0x9a>
 5c8:	fffbffff 	.word	0xfffbffff

000005cc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
 5cc:	b510      	push	{r4, lr}
 5ce:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 5d0:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
 5d2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
 5d4:	2900      	cmp	r1, #0
 5d6:	d104      	bne.n	5e2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
 5d8:	0943      	lsrs	r3, r0, #5
 5da:	01db      	lsls	r3, r3, #7
 5dc:	4905      	ldr	r1, [pc, #20]	; (5f4 <system_pinmux_pin_set_config+0x28>)
 5de:	468c      	mov	ip, r1
 5e0:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
 5e2:	241f      	movs	r4, #31
 5e4:	4020      	ands	r0, r4
 5e6:	2101      	movs	r1, #1
 5e8:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
 5ea:	0018      	movs	r0, r3
 5ec:	4b02      	ldr	r3, [pc, #8]	; (5f8 <system_pinmux_pin_set_config+0x2c>)
 5ee:	4798      	blx	r3
}
 5f0:	bd10      	pop	{r4, pc}
 5f2:	46c0      	nop			; (mov r8, r8)
 5f4:	41004400 	.word	0x41004400
 5f8:	00000525 	.word	0x00000525

000005fc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
 5fc:	4770      	bx	lr
	...

00000600 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
 600:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
 602:	4b05      	ldr	r3, [pc, #20]	; (618 <system_init+0x18>)
 604:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
 606:	4b05      	ldr	r3, [pc, #20]	; (61c <system_init+0x1c>)
 608:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
 60a:	4b05      	ldr	r3, [pc, #20]	; (620 <system_init+0x20>)
 60c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
 60e:	4b05      	ldr	r3, [pc, #20]	; (624 <system_init+0x24>)
 610:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
 612:	4b05      	ldr	r3, [pc, #20]	; (628 <system_init+0x28>)
 614:	4798      	blx	r3
}
 616:	bd10      	pop	{r4, pc}
 618:	000002c5 	.word	0x000002c5
 61c:	00000185 	.word	0x00000185
 620:	000005fd 	.word	0x000005fd
 624:	000005fd 	.word	0x000005fd
 628:	000005fd 	.word	0x000005fd

0000062c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 62c:	e7fe      	b.n	62c <Dummy_Handler>
	...

00000630 <Reset_Handler>:
{
 630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
 632:	4a2a      	ldr	r2, [pc, #168]	; (6dc <Reset_Handler+0xac>)
 634:	4b2a      	ldr	r3, [pc, #168]	; (6e0 <Reset_Handler+0xb0>)
 636:	429a      	cmp	r2, r3
 638:	d011      	beq.n	65e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 63a:	001a      	movs	r2, r3
 63c:	4b29      	ldr	r3, [pc, #164]	; (6e4 <Reset_Handler+0xb4>)
 63e:	429a      	cmp	r2, r3
 640:	d20d      	bcs.n	65e <Reset_Handler+0x2e>
 642:	4a29      	ldr	r2, [pc, #164]	; (6e8 <Reset_Handler+0xb8>)
 644:	3303      	adds	r3, #3
 646:	1a9b      	subs	r3, r3, r2
 648:	089b      	lsrs	r3, r3, #2
 64a:	3301      	adds	r3, #1
 64c:	009b      	lsls	r3, r3, #2
 64e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 650:	4823      	ldr	r0, [pc, #140]	; (6e0 <Reset_Handler+0xb0>)
 652:	4922      	ldr	r1, [pc, #136]	; (6dc <Reset_Handler+0xac>)
 654:	588c      	ldr	r4, [r1, r2]
 656:	5084      	str	r4, [r0, r2]
 658:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 65a:	429a      	cmp	r2, r3
 65c:	d1fa      	bne.n	654 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 65e:	4a23      	ldr	r2, [pc, #140]	; (6ec <Reset_Handler+0xbc>)
 660:	4b23      	ldr	r3, [pc, #140]	; (6f0 <Reset_Handler+0xc0>)
 662:	429a      	cmp	r2, r3
 664:	d20a      	bcs.n	67c <Reset_Handler+0x4c>
 666:	43d3      	mvns	r3, r2
 668:	4921      	ldr	r1, [pc, #132]	; (6f0 <Reset_Handler+0xc0>)
 66a:	185b      	adds	r3, r3, r1
 66c:	2103      	movs	r1, #3
 66e:	438b      	bics	r3, r1
 670:	3304      	adds	r3, #4
 672:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 674:	2100      	movs	r1, #0
 676:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 678:	4293      	cmp	r3, r2
 67a:	d1fc      	bne.n	676 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 67c:	4a1d      	ldr	r2, [pc, #116]	; (6f4 <Reset_Handler+0xc4>)
 67e:	21ff      	movs	r1, #255	; 0xff
 680:	4b1d      	ldr	r3, [pc, #116]	; (6f8 <Reset_Handler+0xc8>)
 682:	438b      	bics	r3, r1
 684:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 686:	39fd      	subs	r1, #253	; 0xfd
 688:	2390      	movs	r3, #144	; 0x90
 68a:	005b      	lsls	r3, r3, #1
 68c:	4a1b      	ldr	r2, [pc, #108]	; (6fc <Reset_Handler+0xcc>)
 68e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 690:	4a1b      	ldr	r2, [pc, #108]	; (700 <Reset_Handler+0xd0>)
 692:	78d3      	ldrb	r3, [r2, #3]
 694:	2503      	movs	r5, #3
 696:	43ab      	bics	r3, r5
 698:	2402      	movs	r4, #2
 69a:	4323      	orrs	r3, r4
 69c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 69e:	78d3      	ldrb	r3, [r2, #3]
 6a0:	270c      	movs	r7, #12
 6a2:	43bb      	bics	r3, r7
 6a4:	2608      	movs	r6, #8
 6a6:	4333      	orrs	r3, r6
 6a8:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
 6aa:	4b16      	ldr	r3, [pc, #88]	; (704 <Reset_Handler+0xd4>)
 6ac:	7b98      	ldrb	r0, [r3, #14]
 6ae:	2230      	movs	r2, #48	; 0x30
 6b0:	4390      	bics	r0, r2
 6b2:	2220      	movs	r2, #32
 6b4:	4310      	orrs	r0, r2
 6b6:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 6b8:	7b99      	ldrb	r1, [r3, #14]
 6ba:	43b9      	bics	r1, r7
 6bc:	4331      	orrs	r1, r6
 6be:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 6c0:	7b9a      	ldrb	r2, [r3, #14]
 6c2:	43aa      	bics	r2, r5
 6c4:	4322      	orrs	r2, r4
 6c6:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
 6c8:	4a0f      	ldr	r2, [pc, #60]	; (708 <Reset_Handler+0xd8>)
 6ca:	6853      	ldr	r3, [r2, #4]
 6cc:	2180      	movs	r1, #128	; 0x80
 6ce:	430b      	orrs	r3, r1
 6d0:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 6d2:	4b0e      	ldr	r3, [pc, #56]	; (70c <Reset_Handler+0xdc>)
 6d4:	4798      	blx	r3
        main();
 6d6:	4b0e      	ldr	r3, [pc, #56]	; (710 <Reset_Handler+0xe0>)
 6d8:	4798      	blx	r3
 6da:	e7fe      	b.n	6da <Reset_Handler+0xaa>
 6dc:	00000a20 	.word	0x00000a20
 6e0:	20000000 	.word	0x20000000
 6e4:	20000008 	.word	0x20000008
 6e8:	20000004 	.word	0x20000004
 6ec:	20000008 	.word	0x20000008
 6f0:	20000050 	.word	0x20000050
 6f4:	e000ed00 	.word	0xe000ed00
 6f8:	00000000 	.word	0x00000000
 6fc:	41007000 	.word	0x41007000
 700:	41005000 	.word	0x41005000
 704:	41004800 	.word	0x41004800
 708:	41004000 	.word	0x41004000
 70c:	00000995 	.word	0x00000995
 710:	00000945 	.word	0x00000945

00000714 <i2c_clock_init>:
 * @return				- void
 *
 * @note				- 
 ******************************************************************************************************/
void i2c_clock_init()
{
 714:	b500      	push	{lr}
 716:	b083      	sub	sp, #12
			PM->APBCMASK.reg |= mask;
 718:	4a07      	ldr	r2, [pc, #28]	; (738 <i2c_clock_init+0x24>)
 71a:	6a13      	ldr	r3, [r2, #32]
 71c:	2110      	movs	r1, #16
 71e:	430b      	orrs	r3, r1
 720:	6213      	str	r3, [r2, #32]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
 722:	a901      	add	r1, sp, #4
 724:	2300      	movs	r3, #0
 726:	700b      	strb	r3, [r1, #0]
	struct system_gclk_chan_config gclk_chan_conf;		//struct to configure generic clock for SERCOM
	uint32_t gclk_index = SERCOM2_GCLK_ID_CORE;

	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_SERCOM2);	//Turn on module in Power Manager - peripheral bus C
	system_gclk_chan_get_config_defaults((&gclk_chan_conf));				//Turn on generic clock for i2c: Default is generator0
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);				//Write defaults to SERCOM2
 728:	2016      	movs	r0, #22
 72a:	4b04      	ldr	r3, [pc, #16]	; (73c <i2c_clock_init+0x28>)
 72c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);									//Enable
 72e:	2016      	movs	r0, #22
 730:	4b03      	ldr	r3, [pc, #12]	; (740 <i2c_clock_init+0x2c>)
 732:	4798      	blx	r3
}
 734:	b003      	add	sp, #12
 736:	bd00      	pop	{pc}
 738:	40000400 	.word	0x40000400
 73c:	00000509 	.word	0x00000509
 740:	0000047d 	.word	0x0000047d

00000744 <i2c_pin_init>:
 * @return				- void
 *
 * @note				- PA08 = SDA, PA09 = SCL
 ******************************************************************************************************/
void i2c_pin_init()
{
 744:	b510      	push	{r4, lr}
	PORT->Group[port].PINCFG[((pinmux >> 16) - (port*32))].bit.PMUXEN = 1;
 746:	4b0e      	ldr	r3, [pc, #56]	; (780 <i2c_pin_init+0x3c>)
 748:	2148      	movs	r1, #72	; 0x48
 74a:	5c5a      	ldrb	r2, [r3, r1]
 74c:	2401      	movs	r4, #1
 74e:	4322      	orrs	r2, r4
 750:	545a      	strb	r2, [r3, r1]
	PORT->Group[port].PMUX[((pinmux >> 16) - (port*32))/2].reg &= ~(0xF << (4 * ((pinmux >> 16) & 0x01u)));
 752:	2234      	movs	r2, #52	; 0x34
 754:	5c98      	ldrb	r0, [r3, r2]
 756:	3939      	subs	r1, #57	; 0x39
 758:	4388      	bics	r0, r1
 75a:	5498      	strb	r0, [r3, r2]
	PORT->Group[port].PMUX[((pinmux >> 16) - (port*32))/2].reg |= (uint8_t)((pinmux &0x0000FFFF) << (4 * ((pinmux >> 16) & 0x01u)));
 75c:	5c98      	ldrb	r0, [r3, r2]
 75e:	390c      	subs	r1, #12
 760:	4308      	orrs	r0, r1
 762:	5498      	strb	r0, [r3, r2]
	PORT->Group[port].PINCFG[((pinmux >> 16) - (port*32))].bit.PMUXEN = 1;
 764:	2049      	movs	r0, #73	; 0x49
 766:	5c19      	ldrb	r1, [r3, r0]
 768:	4321      	orrs	r1, r4
 76a:	5419      	strb	r1, [r3, r0]
	PORT->Group[port].PMUX[((pinmux >> 16) - (port*32))/2].reg &= ~(0xF << (4 * ((pinmux >> 16) & 0x01u)));
 76c:	5c99      	ldrb	r1, [r3, r2]
 76e:	383a      	subs	r0, #58	; 0x3a
 770:	4001      	ands	r1, r0
 772:	5499      	strb	r1, [r3, r2]
	PORT->Group[port].PMUX[((pinmux >> 16) - (port*32))/2].reg |= (uint8_t)((pinmux &0x0000FFFF) << (4 * ((pinmux >> 16) & 0x01u)));
 774:	5c99      	ldrb	r1, [r3, r2]
 776:	3021      	adds	r0, #33	; 0x21
 778:	4301      	orrs	r1, r0
 77a:	5499      	strb	r1, [r3, r2]
	pin_set_peripheral_function(PINMUX_PA08D_SERCOM2_PAD0);	
	pin_set_peripheral_function(PINMUX_PA09D_SERCOM2_PAD1);
}
 77c:	bd10      	pop	{r4, pc}
 77e:	46c0      	nop			; (mov r8, r8)
 780:	41004400 	.word	0x41004400

00000784 <i2c_master_init>:
	*	- SPEED bit field as 0x01, I2C Master runs at Fast mode + - 1MHz
	*	- SDAHOLD bit field as 0x02, SDA hold time is configured for 300-600ns
	*	- RUNSTDBY bit as 0x01, Generic clock is enabled in all sleep modes (any interrupt can wake up the device)
	*	- MODE bitfield to 0x5, SERCOM2 is configured as I2C Master
	*/
	SERCOM2->I2CM.CTRLA.reg = //SERCOM_I2CM_CTRLA_SPEED(STANDARD_MODE_FAST_MODE)	|
 784:	4b14      	ldr	r3, [pc, #80]	; (7d8 <i2c_master_init+0x54>)
 786:	4a15      	ldr	r2, [pc, #84]	; (7dc <i2c_master_init+0x58>)
 788:	601a      	str	r2, [r3, #0]
								SERCOM_I2CM_CTRLA_SDAHOLD(0x2)			|
								SERCOM_I2CM_CTRLA_RUNSTDBY				|
								SERCOM_I2CS_CTRLA_MODE_I2C_MASTER;

	/* Enable Smart Mode - Will ACK when DATA.DATA is read*/
	SERCOM2->I2CM.CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
 78a:	2280      	movs	r2, #128	; 0x80
 78c:	0052      	lsls	r2, r2, #1
 78e:	605a      	str	r2, [r3, #4]

	/* Synchronization Busy - Writing CTRLB.CMD or CTRLB.FIFOCLR, STATUS.BUSSTATE, ADDR, or DATA when the SERCOM is
	enabled requires synchronization. When written, the SYNCBUSY.SYSOP bit will be set until
	synchronization is complete.*/
	while(SERCOM2->I2CM.SYNCBUSY.bit.SYSOP);
 790:	001a      	movs	r2, r3
 792:	69d3      	ldr	r3, [r2, #28]
 794:	075b      	lsls	r3, r3, #29
 796:	d4fc      	bmi.n	792 <i2c_master_init+0xe>
	   fSCL = 1MHz, fGCLK = 48MHz (default), trise = 100ns.
	   Using datasheet calc, BAUD + BAUDLOW = 33 (tlow =~ 2x thigh) */
	//SERCOM2->I2CM.BAUD.reg = SERCOM_I2CM_BAUD_BAUD(11) | SERCOM_I2CM_BAUD_BAUDLOW(22);

	/* Wait for Sync */
	while(SERCOM2->I2CM.SYNCBUSY.bit.SYSOP);
 798:	4a0f      	ldr	r2, [pc, #60]	; (7d8 <i2c_master_init+0x54>)
 79a:	69d3      	ldr	r3, [r2, #28]
 79c:	075b      	lsls	r3, r3, #29
 79e:	d4fc      	bmi.n	79a <i2c_master_init+0x16>

	/* Enabled SERCOM2 Peripheral */
	SERCOM2->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
 7a0:	4a0d      	ldr	r2, [pc, #52]	; (7d8 <i2c_master_init+0x54>)
 7a2:	6813      	ldr	r3, [r2, #0]
 7a4:	2102      	movs	r1, #2
 7a6:	430b      	orrs	r3, r1
 7a8:	6013      	str	r3, [r2, #0]

	/* SERCOM Enable synchronization busy (Wait) */
	while((SERCOM2->I2CM.SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_ENABLE));
 7aa:	0011      	movs	r1, r2
 7ac:	2202      	movs	r2, #2
 7ae:	69cb      	ldr	r3, [r1, #28]
 7b0:	421a      	tst	r2, r3
 7b2:	d1fc      	bne.n	7ae <i2c_master_init+0x2a>

	/* BusState to Idle (Forced) eg when in unknown state*/
	SERCOM2->I2CM.STATUS.bit.BUSSTATE = 0x1;
 7b4:	4a08      	ldr	r2, [pc, #32]	; (7d8 <i2c_master_init+0x54>)
 7b6:	8b53      	ldrh	r3, [r2, #26]
 7b8:	2130      	movs	r1, #48	; 0x30
 7ba:	438b      	bics	r3, r1
 7bc:	2110      	movs	r1, #16
 7be:	430b      	orrs	r3, r1
 7c0:	8353      	strh	r3, [r2, #26]

	/* Wait for Sync */
	while(SERCOM2->I2CM.SYNCBUSY.bit.SYSOP);
 7c2:	69d3      	ldr	r3, [r2, #28]
 7c4:	075b      	lsls	r3, r3, #29
 7c6:	d4fc      	bmi.n	7c2 <i2c_master_init+0x3e>

	/* Enable Interrupt: Master on bus, Slave on Bus [INTterrupt ENable SET 
	   Enable Receive Ready Interrupt Master position, slave position pg 610*/
	SERCOM2->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;
 7c8:	2203      	movs	r2, #3
 7ca:	4b03      	ldr	r3, [pc, #12]	; (7d8 <i2c_master_init+0x54>)
 7cc:	759a      	strb	r2, [r3, #22]
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
 7ce:	2280      	movs	r2, #128	; 0x80
 7d0:	0112      	lsls	r2, r2, #4
 7d2:	4b03      	ldr	r3, [pc, #12]	; (7e0 <i2c_master_init+0x5c>)
 7d4:	601a      	str	r2, [r3, #0]

	/* Enable SERCOM2 interrupt handler */
	system_interrupt_enable(SERCOM2_IRQn);

}
 7d6:	4770      	bx	lr
 7d8:	42001000 	.word	0x42001000
 7dc:	00200094 	.word	0x00200094
 7e0:	e000e100 	.word	0xe000e100

000007e4 <i2c_master_transaction>:
 * @note				- 
 *						
 ******************************************************************************************************/
void i2c_master_transaction(void)
{
	i = 0;
 7e4:	2200      	movs	r2, #0
 7e6:	4b12      	ldr	r3, [pc, #72]	; (830 <i2c_master_transaction+0x4c>)
 7e8:	701a      	strb	r2, [r3, #0]
	
	/* Acknowledge behavior: 0 = send ACK in ACKACT bit CTRLB */
	SERCOM2->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
 7ea:	4a12      	ldr	r2, [pc, #72]	; (834 <i2c_master_transaction+0x50>)
 7ec:	6853      	ldr	r3, [r2, #4]
 7ee:	4912      	ldr	r1, [pc, #72]	; (838 <i2c_master_transaction+0x54>)
 7f0:	400b      	ands	r3, r1
 7f2:	6053      	str	r3, [r2, #4]

	/* Wait for Sync */
	while(SERCOM2->I2CM.SYNCBUSY.bit.SYSOP);
 7f4:	69d3      	ldr	r3, [r2, #28]
 7f6:	075b      	lsls	r3, r3, #29
 7f8:	d4fc      	bmi.n	7f4 <i2c_master_transaction+0x10>

	/* load I2C Slave Address into reg, and Write(0) in 0th bit to Slave.  Initiate Transfer */
	SERCOM2->I2CM.ADDR.reg = (SLAVE_ADDR << 1) | 0;
 7fa:	2224      	movs	r2, #36	; 0x24
 7fc:	4b0d      	ldr	r3, [pc, #52]	; (834 <i2c_master_transaction+0x50>)
 7fe:	625a      	str	r2, [r3, #36]	; 0x24
	while(!tx_done);			//wait for transmit complete (Interrupt Handler)
 800:	4a0e      	ldr	r2, [pc, #56]	; (83c <i2c_master_transaction+0x58>)
 802:	7813      	ldrb	r3, [r2, #0]
 804:	2b00      	cmp	r3, #0
 806:	d0fc      	beq.n	802 <i2c_master_transaction+0x1e>
	i =0;

	/* ACK is sent */
	SERCOM2->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
 808:	4a0a      	ldr	r2, [pc, #40]	; (834 <i2c_master_transaction+0x50>)
 80a:	6853      	ldr	r3, [r2, #4]
 80c:	490a      	ldr	r1, [pc, #40]	; (838 <i2c_master_transaction+0x54>)
 80e:	400b      	ands	r3, r1
 810:	6053      	str	r3, [r2, #4]

	/* Wait for Sync */
	while(SERCOM2->I2CM.SYNCBUSY.bit.SYSOP);
 812:	69d3      	ldr	r3, [r2, #28]
 814:	075b      	lsls	r3, r3, #29
 816:	d4fc      	bmi.n	812 <i2c_master_transaction+0x2e>

	/* Read (1) in 0th bit, from Slave (ACK) */
	SERCOM2->I2CM.ADDR.reg = (SLAVE_ADDR << 1) | 1;
 818:	2225      	movs	r2, #37	; 0x25
 81a:	4b06      	ldr	r3, [pc, #24]	; (834 <i2c_master_transaction+0x50>)
 81c:	625a      	str	r2, [r3, #36]	; 0x24
	while(!tx_done);			//wait for transmit complete (Interrupt Handler)
 81e:	4a07      	ldr	r2, [pc, #28]	; (83c <i2c_master_transaction+0x58>)
 820:	7813      	ldrb	r3, [r2, #0]
 822:	2b00      	cmp	r3, #0
 824:	d0fc      	beq.n	820 <i2c_master_transaction+0x3c>

	/* Interrupts are cleared MS/SL */
	SERCOM2->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
 826:	2203      	movs	r2, #3
 828:	4b02      	ldr	r3, [pc, #8]	; (834 <i2c_master_transaction+0x50>)
 82a:	751a      	strb	r2, [r3, #20]
}
 82c:	4770      	bx	lr
 82e:	46c0      	nop			; (mov r8, r8)
 830:	20000048 	.word	0x20000048
 834:	42001000 	.word	0x42001000
 838:	fffbffff 	.word	0xfffbffff
 83c:	20000045 	.word	0x20000045

00000840 <SERCOM2_Handler>:
 *						- Overrides weak definition
 ******************************************************************************************************/
 void SERCOM2_Handler(void)
 {
	/* Check for master-on-bus interrupt set condition */
	if (SERCOM2->I2CM.INTFLAG.bit.MB)
 840:	4b39      	ldr	r3, [pc, #228]	; (928 <SERCOM2_Handler+0xe8>)
 842:	7e1b      	ldrb	r3, [r3, #24]
 844:	07db      	lsls	r3, r3, #31
 846:	d50e      	bpl.n	866 <SERCOM2_Handler+0x26>
	{
		/* Finished TX? (No more i to send?) */
		if (i == BUF_SIZE)
 848:	4b38      	ldr	r3, [pc, #224]	; (92c <SERCOM2_Handler+0xec>)
 84a:	781b      	ldrb	r3, [r3, #0]
 84c:	2b03      	cmp	r3, #3
 84e:	d034      	beq.n	8ba <SERCOM2_Handler+0x7a>

			tx_done = true;
			i = 0;
		} else {
			/* Not done. Place the data from the TX buffer to the DATA register */
			SERCOM2->I2CM.DATA.reg = tx_buf[i++];
 850:	1c59      	adds	r1, r3, #1
 852:	4a36      	ldr	r2, [pc, #216]	; (92c <SERCOM2_Handler+0xec>)
 854:	7011      	strb	r1, [r2, #0]
 856:	4a36      	ldr	r2, [pc, #216]	; (930 <SERCOM2_Handler+0xf0>)
 858:	5cd1      	ldrb	r1, [r2, r3]
 85a:	2328      	movs	r3, #40	; 0x28
 85c:	4a32      	ldr	r2, [pc, #200]	; (928 <SERCOM2_Handler+0xe8>)
 85e:	54d1      	strb	r1, [r2, r3]
			while(SERCOM2->I2CM.SYNCBUSY.bit.SYSOP);	
 860:	69d3      	ldr	r3, [r2, #28]
 862:	075b      	lsls	r3, r3, #29
 864:	d4fc      	bmi.n	860 <SERCOM2_Handler+0x20>
		}
	}
	/* Check for slave-on-bus interrupt set condition */
	if (SERCOM2->I2CM.INTFLAG.bit.SB)
 866:	4b30      	ldr	r3, [pc, #192]	; (928 <SERCOM2_Handler+0xe8>)
 868:	7e1b      	ldrb	r3, [r3, #24]
 86a:	079b      	lsls	r3, r3, #30
 86c:	d524      	bpl.n	8b8 <SERCOM2_Handler+0x78>
	{
		/* Finished RX? (No more i to send?) */
		if (i == (BUF_SIZE - 1))
 86e:	4b2f      	ldr	r3, [pc, #188]	; (92c <SERCOM2_Handler+0xec>)
 870:	7819      	ldrb	r1, [r3, #0]
 872:	2902      	cmp	r1, #2
 874:	d036      	beq.n	8e4 <SERCOM2_Handler+0xa4>
			
				rx_done = true;
			
			} else {
				/* Not done. Place the data from the DATA register into the RX BUFFER */
				SERCOM2->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
 876:	4a2c      	ldr	r2, [pc, #176]	; (928 <SERCOM2_Handler+0xe8>)
 878:	6850      	ldr	r0, [r2, #4]
 87a:	2380      	movs	r3, #128	; 0x80
 87c:	02db      	lsls	r3, r3, #11
 87e:	4303      	orrs	r3, r0
 880:	6053      	str	r3, [r2, #4]
			
				/* Wait for Sync */
				while(SERCOM2->I2CM.SYNCBUSY.bit.SYSOP);
 882:	69d3      	ldr	r3, [r2, #28]
 884:	075b      	lsls	r3, r3, #29
 886:	d4fc      	bmi.n	882 <SERCOM2_Handler+0x42>
			
				/* Read data from Register into buffer */
				rx_buf[i++] = SERCOM2->I2CM.DATA.reg;
 888:	1c4a      	adds	r2, r1, #1
 88a:	4b28      	ldr	r3, [pc, #160]	; (92c <SERCOM2_Handler+0xec>)
 88c:	701a      	strb	r2, [r3, #0]
 88e:	2328      	movs	r3, #40	; 0x28
 890:	4a25      	ldr	r2, [pc, #148]	; (928 <SERCOM2_Handler+0xe8>)
 892:	5cd2      	ldrb	r2, [r2, r3]
 894:	4b27      	ldr	r3, [pc, #156]	; (934 <SERCOM2_Handler+0xf4>)
 896:	545a      	strb	r2, [r3, r1]
			
				/* Wait for Sync */
				while(SERCOM2->I2CM.SYNCBUSY.bit.SYSOP);
 898:	4a23      	ldr	r2, [pc, #140]	; (928 <SERCOM2_Handler+0xe8>)
 89a:	69d3      	ldr	r3, [r2, #28]
 89c:	075b      	lsls	r3, r3, #29
 89e:	d4fc      	bmi.n	89a <SERCOM2_Handler+0x5a>

				/* Send ACK after reading Each Byte */
				SERCOM2->I2CM.CTRLB.bit.CMD = 0x2;
 8a0:	4921      	ldr	r1, [pc, #132]	; (928 <SERCOM2_Handler+0xe8>)
 8a2:	684b      	ldr	r3, [r1, #4]
 8a4:	4a24      	ldr	r2, [pc, #144]	; (938 <SERCOM2_Handler+0xf8>)
 8a6:	401a      	ands	r2, r3
 8a8:	2380      	movs	r3, #128	; 0x80
 8aa:	029b      	lsls	r3, r3, #10
 8ac:	4313      	orrs	r3, r2
 8ae:	604b      	str	r3, [r1, #4]

				/* Wait for Sync */
				while(SERCOM2->I2CM.SYNCBUSY.bit.SYSOP);
 8b0:	000a      	movs	r2, r1
 8b2:	69d3      	ldr	r3, [r2, #28]
 8b4:	075b      	lsls	r3, r3, #29
 8b6:	d4fc      	bmi.n	8b2 <SERCOM2_Handler+0x72>
		}
	}
}
 8b8:	4770      	bx	lr
			SERCOM2->I2CM.CTRLB.bit.CMD = 0x3;
 8ba:	4a1b      	ldr	r2, [pc, #108]	; (928 <SERCOM2_Handler+0xe8>)
 8bc:	6851      	ldr	r1, [r2, #4]
 8be:	23c0      	movs	r3, #192	; 0xc0
 8c0:	029b      	lsls	r3, r3, #10
 8c2:	430b      	orrs	r3, r1
 8c4:	6053      	str	r3, [r2, #4]
			while(SERCOM2->I2CM.SYNCBUSY.bit.SYSOP);
 8c6:	69d3      	ldr	r3, [r2, #28]
 8c8:	075b      	lsls	r3, r3, #29
 8ca:	d4fc      	bmi.n	8c6 <SERCOM2_Handler+0x86>
			tx_done = true;
 8cc:	2201      	movs	r2, #1
 8ce:	4b1b      	ldr	r3, [pc, #108]	; (93c <SERCOM2_Handler+0xfc>)
 8d0:	701a      	strb	r2, [r3, #0]
			i = 0;
 8d2:	2200      	movs	r2, #0
 8d4:	4b15      	ldr	r3, [pc, #84]	; (92c <SERCOM2_Handler+0xec>)
 8d6:	701a      	strb	r2, [r3, #0]
	if (SERCOM2->I2CM.INTFLAG.bit.SB)
 8d8:	4b13      	ldr	r3, [pc, #76]	; (928 <SERCOM2_Handler+0xe8>)
 8da:	7e1b      	ldrb	r3, [r3, #24]
		if (i == (BUF_SIZE - 1))
 8dc:	2100      	movs	r1, #0
	if (SERCOM2->I2CM.INTFLAG.bit.SB)
 8de:	079b      	lsls	r3, r3, #30
 8e0:	d4c9      	bmi.n	876 <SERCOM2_Handler+0x36>
 8e2:	e7e9      	b.n	8b8 <SERCOM2_Handler+0x78>
				SERCOM2->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
 8e4:	4a10      	ldr	r2, [pc, #64]	; (928 <SERCOM2_Handler+0xe8>)
 8e6:	6851      	ldr	r1, [r2, #4]
 8e8:	2380      	movs	r3, #128	; 0x80
 8ea:	02db      	lsls	r3, r3, #11
 8ec:	430b      	orrs	r3, r1
 8ee:	6053      	str	r3, [r2, #4]
				while(SERCOM2->I2CM.SYNCBUSY.bit.SYSOP);
 8f0:	69d3      	ldr	r3, [r2, #28]
 8f2:	075b      	lsls	r3, r3, #29
 8f4:	d4fc      	bmi.n	8f0 <SERCOM2_Handler+0xb0>
				SERCOM2->I2CM.CTRLB.bit.CMD = 0x3;
 8f6:	4a0c      	ldr	r2, [pc, #48]	; (928 <SERCOM2_Handler+0xe8>)
 8f8:	6851      	ldr	r1, [r2, #4]
 8fa:	23c0      	movs	r3, #192	; 0xc0
 8fc:	029b      	lsls	r3, r3, #10
 8fe:	430b      	orrs	r3, r1
 900:	6053      	str	r3, [r2, #4]
				while(SERCOM2->I2CM.SYNCBUSY.bit.SYSOP);	
 902:	69d3      	ldr	r3, [r2, #28]
 904:	075b      	lsls	r3, r3, #29
 906:	d4fc      	bmi.n	902 <SERCOM2_Handler+0xc2>
				rx_buf[i++] = SERCOM2->I2CM.DATA.reg;
 908:	2203      	movs	r2, #3
 90a:	4b08      	ldr	r3, [pc, #32]	; (92c <SERCOM2_Handler+0xec>)
 90c:	701a      	strb	r2, [r3, #0]
 90e:	2328      	movs	r3, #40	; 0x28
 910:	4a05      	ldr	r2, [pc, #20]	; (928 <SERCOM2_Handler+0xe8>)
 912:	5cd2      	ldrb	r2, [r2, r3]
 914:	4b07      	ldr	r3, [pc, #28]	; (934 <SERCOM2_Handler+0xf4>)
 916:	709a      	strb	r2, [r3, #2]
				while(SERCOM2->I2CM.SYNCBUSY.bit.SYSOP);
 918:	4a03      	ldr	r2, [pc, #12]	; (928 <SERCOM2_Handler+0xe8>)
 91a:	69d3      	ldr	r3, [r2, #28]
 91c:	075b      	lsls	r3, r3, #29
 91e:	d4fc      	bmi.n	91a <SERCOM2_Handler+0xda>
				rx_done = true;
 920:	2201      	movs	r2, #1
 922:	4b07      	ldr	r3, [pc, #28]	; (940 <SERCOM2_Handler+0x100>)
 924:	701a      	strb	r2, [r3, #0]
 926:	e7c7      	b.n	8b8 <SERCOM2_Handler+0x78>
 928:	42001000 	.word	0x42001000
 92c:	20000048 	.word	0x20000048
 930:	20000004 	.word	0x20000004
 934:	2000004c 	.word	0x2000004c
 938:	fffcffff 	.word	0xfffcffff
 93c:	20000045 	.word	0x20000045
 940:	20000044 	.word	0x20000044

00000944 <main>:
 * @return				- void
 *
 * @note				- 
 ******************************************************************************************************/
int main (void)
{
 944:	b570      	push	{r4, r5, r6, lr}
	/* Configure clock sources, GLK generators and board hardware */
	system_init();
 946:	4b0c      	ldr	r3, [pc, #48]	; (978 <main+0x34>)
 948:	4798      	blx	r3
	i2c_clock_init();
 94a:	4b0c      	ldr	r3, [pc, #48]	; (97c <main+0x38>)
 94c:	4798      	blx	r3
	i2c_pin_init();
 94e:	4b0c      	ldr	r3, [pc, #48]	; (980 <main+0x3c>)
 950:	4798      	blx	r3
	i2c_master_init();
 952:	4b0c      	ldr	r3, [pc, #48]	; (984 <main+0x40>)
 954:	4798      	blx	r3
	i2c_master_transaction();
 956:	4b0c      	ldr	r3, [pc, #48]	; (988 <main+0x44>)
 958:	4798      	blx	r3
 95a:	4c0c      	ldr	r4, [pc, #48]	; (98c <main+0x48>)
		if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
			/* Yes, so turn LED on. */
			port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
			
			/* and run i2c transaction */
			i2c_master_transaction();
 95c:	4d0a      	ldr	r5, [pc, #40]	; (988 <main+0x44>)
 95e:	e003      	b.n	968 <main+0x24>
	} else {
		port_base->OUTCLR.reg = pin_mask;
 960:	2380      	movs	r3, #128	; 0x80
 962:	05db      	lsls	r3, r3, #23
 964:	6163      	str	r3, [r4, #20]
 966:	47a8      	blx	r5
	return (port_base->IN.reg & pin_mask);
 968:	4b09      	ldr	r3, [pc, #36]	; (990 <main+0x4c>)
 96a:	6a1b      	ldr	r3, [r3, #32]
		if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
 96c:	041b      	lsls	r3, r3, #16
 96e:	d5f7      	bpl.n	960 <main+0x1c>
		port_base->OUTSET.reg = pin_mask;
 970:	2380      	movs	r3, #128	; 0x80
 972:	05db      	lsls	r3, r3, #23
 974:	61a3      	str	r3, [r4, #24]
 976:	e7f7      	b.n	968 <main+0x24>
 978:	00000601 	.word	0x00000601
 97c:	00000715 	.word	0x00000715
 980:	00000745 	.word	0x00000745
 984:	00000785 	.word	0x00000785
 988:	000007e5 	.word	0x000007e5
 98c:	41004480 	.word	0x41004480
 990:	41004400 	.word	0x41004400

00000994 <__libc_init_array>:
 994:	b570      	push	{r4, r5, r6, lr}
 996:	2600      	movs	r6, #0
 998:	4d0c      	ldr	r5, [pc, #48]	; (9cc <__libc_init_array+0x38>)
 99a:	4c0d      	ldr	r4, [pc, #52]	; (9d0 <__libc_init_array+0x3c>)
 99c:	1b64      	subs	r4, r4, r5
 99e:	10a4      	asrs	r4, r4, #2
 9a0:	42a6      	cmp	r6, r4
 9a2:	d109      	bne.n	9b8 <__libc_init_array+0x24>
 9a4:	2600      	movs	r6, #0
 9a6:	f000 f82b 	bl	a00 <_init>
 9aa:	4d0a      	ldr	r5, [pc, #40]	; (9d4 <__libc_init_array+0x40>)
 9ac:	4c0a      	ldr	r4, [pc, #40]	; (9d8 <__libc_init_array+0x44>)
 9ae:	1b64      	subs	r4, r4, r5
 9b0:	10a4      	asrs	r4, r4, #2
 9b2:	42a6      	cmp	r6, r4
 9b4:	d105      	bne.n	9c2 <__libc_init_array+0x2e>
 9b6:	bd70      	pop	{r4, r5, r6, pc}
 9b8:	00b3      	lsls	r3, r6, #2
 9ba:	58eb      	ldr	r3, [r5, r3]
 9bc:	4798      	blx	r3
 9be:	3601      	adds	r6, #1
 9c0:	e7ee      	b.n	9a0 <__libc_init_array+0xc>
 9c2:	00b3      	lsls	r3, r6, #2
 9c4:	58eb      	ldr	r3, [r5, r3]
 9c6:	4798      	blx	r3
 9c8:	3601      	adds	r6, #1
 9ca:	e7f2      	b.n	9b2 <__libc_init_array+0x1e>
 9cc:	00000a0c 	.word	0x00000a0c
 9d0:	00000a0c 	.word	0x00000a0c
 9d4:	00000a0c 	.word	0x00000a0c
 9d8:	00000a10 	.word	0x00000a10
 9dc:	00000248 	.word	0x00000248
 9e0:	00000228 	.word	0x00000228
 9e4:	00000228 	.word	0x00000228
 9e8:	000002b4 	.word	0x000002b4
 9ec:	0000023a 	.word	0x0000023a
 9f0:	00000256 	.word	0x00000256
 9f4:	0000022c 	.word	0x0000022c
 9f8:	00000264 	.word	0x00000264
 9fc:	000002a4 	.word	0x000002a4

00000a00 <_init>:
 a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 a02:	46c0      	nop			; (mov r8, r8)
 a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 a06:	bc08      	pop	{r3}
 a08:	469e      	mov	lr, r3
 a0a:	4770      	bx	lr

00000a0c <__init_array_start>:
 a0c:	000000dd 	.word	0x000000dd

00000a10 <_fini>:
 a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 a12:	46c0      	nop			; (mov r8, r8)
 a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 a16:	bc08      	pop	{r3}
 a18:	469e      	mov	lr, r3
 a1a:	4770      	bx	lr

00000a1c <__fini_array_start>:
 a1c:	000000b5 	.word	0x000000b5
